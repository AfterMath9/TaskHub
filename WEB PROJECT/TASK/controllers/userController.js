// code generated by ---ChatGPT---
const bcrypt = require('bcrypt');
const User = require('../models/userModel');

exports.create = async (req, res, next) => {
  try {
    const { email, display_name: displayName, role, password } = req.body;
    if (!email || !String(email).trim() || !displayName || !String(displayName).trim() || !password || password.length < 6) {
      res.flash('danger', 'Email, name, and password (6+ chars) required.');
      return res.redirect('/#about');
    }

    const roleValue = role === 'admin' ? 'admin' : 'user';

    const existing = await User.findByEmail(String(email).trim());
    if (existing) {
      res.flash('warning', 'A user already exists with that email.');
      return res.redirect('/#about');
    }

    const passwordHash = await bcrypt.hash(password, 12);
    await User.create({ email, displayName, passwordHash, role: roleValue });
    res.flash('success', 'User added.');
    return res.redirect('/#about');
  } catch (err) {
    return next(err);
  }
};

exports.update = async (req, res, next) => {
  try {
    const { display_name: displayName, role, password } = req.body;
    if (!displayName || !String(displayName).trim()) {
      res.flash('danger', 'Display name is required.');
      return res.redirect('/#about');
    }
    let passwordHash;

    if (password && password.trim()) {
      if (password.trim().length < 6) {
        res.flash('danger', 'Passwords must be at least 6 characters.');
        return res.redirect('/#about');
      }
      passwordHash = await bcrypt.hash(password.trim(), 12);
    }

    const roleValue = role === 'admin' ? 'admin' : 'user';

    await User.update({ id: req.params.id, displayName, role: roleValue, passwordHash });

    if (req.session.user && req.session.user.id === Number(req.params.id)) {
      req.session.user.display_name = displayName;
      req.session.user.role = roleValue;
    }

    res.flash('info', 'User updated.');
    return res.redirect('/#about');
  } catch (err) {
    return next(err);
  }
};

exports.remove = async (req, res, next) => {
  try {
    const targetId = Number(req.params.id);
    if (req.session.user && req.session.user.id === targetId) {
      res.flash('warning', 'You cannot delete the currently signed-in account.');
      return res.redirect('/#about');
    }
    await User.remove(targetId);
    res.flash('info', 'User removed.');
    return res.redirect('/#about');
  } catch (err) {
    return next(err);
  }
};
